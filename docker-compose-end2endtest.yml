services:
  end2endtest:
    build:
      context: ./server/workers/tests
      dockerfile: ./Dockerfile.tests
    container_name: end2endtest
    hostname: "end2endtest"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOSTS: ${POSTGRES_HOSTS}
      POSTGRES_PORTS: ${POSTGRES_PORTS}
      DEFAULT_DATABASE: ${POSTGRES_DB}
      SERVICE_VERSION: "test_version"
    ports:
      - "7575:80"
    volumes:
      - ./server/:/app
    depends_on:
      - db
      - backend
    restart: "no"
    entrypoint: ["pytest", "/app/workers/tests/test_end2end.py", "-s", "-rfA"]
    networks:
      - test

  db:
    container_name: ${POSTGRES_HOSTS}
    image: "postgres:12.2-alpine"
    restart: "no"
    hostname: ${POSTGRES_HOSTS}
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PORT: ${POSTGRES_PORTS}
      DEFAULT_DATABASE: ${POSTGRES_DB}
    command: postgres -c config_file=/etc/postgresql.conf -c hba_file=/etc/pg_hba.conf
    volumes:
      - ./server/workers/tests/test_data/pg_hba_test_local.conf:/etc/pg_hba.conf
      - ./server/workers/tests/test_data/postgresql_test_local.conf:/etc/postgresql.conf
    ports:
      - "${POSTGRES_PORTS}:${POSTGRES_PORTS}"
    networks:
      - test

  redis:
    image: "redis:6.0-alpine"
    restart: unless-stopped
    hostname: "${REDIS_HOST}"
    # container_name: "${REDIS_HOST}"
    environment:
      REDIS_HOST: "${REDIS_HOST}"
      REDIS_PORT: "${REDIS_PORT}"
      REDIS_PASSWORD: "${REDIS_PASSWORD}"
    command:
      [
        "redis-server",
        "/etc/redis/redis.conf",
        "--bind",
        "${REDIS_HOST}",
        "--port",
        "${REDIS_PORT}",
      ]
    volumes:
      - "redis:/var/lib/redis/data"
      - ./local_dev/redis.conf:/etc/redis/redis.conf
    ports:
      - "127.0.0.1:${REDIS_PORT}:${REDIS_PORT}"
    networks:
      - test

  api:
    build:
      context: server/workers
      dockerfile: api/Dockerfile
    container_name: api
    hostname: "api"
    restart: unless-stopped
    environment:
      SERVICE_VERSION: "${SERVICE_VERSION}"
      REDIS_HOST: "${REDIS_HOST}"
      REDIS_PORT: "${REDIS_PORT}"
      REDIS_PASSWORD: "${REDIS_PASSWORD}"
      REDIS_DB: "${REDIS_DB}"
      BEHIND_PROXY: "${BEHIND_PROXY}"
      FLASK_ENV: "${FLASK_ENV}"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_HOST: "${POSTGRES_HOSTS}"
      DEFAULT_DATABASE: "${POSTGRES_DB}"
    command: ["python", "api/tests/mock_app.py"]
    depends_on:
      - redis
      - db
    networks:
      - test

  persistence:
    container_name: persistence
    hostname: "persistence"
    build:
      context: server
      dockerfile: workers/persistence/Dockerfile
    restart: "no"
    environment:
      SERVICE_VERSION: "test"
      BEHIND_PROXY: "false"
      FLASK_ENV: "development"
      POSTGRES_HOSTS: ${POSTGRES_HOSTS}
      POSTGRES_PORTS: ${POSTGRES_PORTS}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      DEFAULT_DATABASE: ${POSTGRES_DB}
    volumes:
      - ./server/workers/tests/mock_app.py:/persistence/mock_app.py
    command: ["python", "mock_app.py"]
    networks:
      - test

  backend:
    build:
      context: ./server/workers/tests
      dockerfile: ./Dockerfile.backend
    container_name: backend
    hostname: "backend"
    volumes:
      - ./server/:/var/www/html/server
      - ./server/workers/tests/test_data/test.sqlite:/var/www/localstorage/test.sqlite
    restart: "no"
    networks:
      - test
    depends_on:
      - api
    ports:
      - "80:80"

  orcid:
    build:
      context: server
      dockerfile: workers/orcid/Dockerfile
    restart: unless-stopped
    environment:
      SERVICE_VERSION: "${SERVICE_VERSION}"
      REDIS_HOST: "${REDIS_HOST}"
      REDIS_PORT: "${REDIS_PORT}"
      REDIS_DB: "${REDIS_DB}"
      REDIS_PASSWORD: "${REDIS_PASSWORD}"
      LOGLEVEL: "${LOGLEVEL}"
      LC_ALL: "en_US.UTF-8"
      LANG: "en_US.UTF-8"
      PYTHONIOENCODING: "utf-8"
      ORCID_CLIENT_ID: "${ORCID_CLIENT_ID}"
      ORCID_CLIENT_SECRET: "${ORCID_CLIENT_SECRET}"
    depends_on:
      - redis
    networks:
      - test

  dataprocessing:
    build:
      context: server
      dockerfile: workers/dataprocessing/Dockerfile
    environment:
      SERVICE_VERSION: "${SERVICE_VERSION}"
      REDIS_HOST: "${REDIS_HOST}"
      REDIS_PORT: "${REDIS_PORT}"
      REDIS_DB: "${REDIS_DB}"
      REDIS_PASSWORD: "${REDIS_PASSWORD}"
      LOGLEVEL: "${LOGLEVEL}"
      LOGFILE: "${LOGFILE}"
      RENV_VERSION: 0.14.0-5
      CRAN_REPOS: https://cran.wu.ac.at
      LC_ALL: "en_US.UTF-8"
      LANG: "en_US.UTF-8"
      RENV_PATHS_CACHE: /renv/cache
      PYTHONIOENCODING: "utf-8"
    restart: unless-stopped
    volumes:
      - ./local_dev/renv/cache:/renv/cache
      - /var/log/headstart:/var/log/headstart
      - ./server/preprocessing/other-scripts:/headstart/other-scripts
    depends_on:
      - redis
    networks:
      - test

  base:
    build:
      context: server
      dockerfile: workers/base/Dockerfile
    environment:
      SERVICE_VERSION: "${SERVICE_VERSION}"
      REDIS_HOST: "${REDIS_HOST}"
      REDIS_PORT: "${REDIS_PORT}"
      REDIS_DB: "${REDIS_DB}"
      REDIS_PASSWORD: "${REDIS_PASSWORD}"
      LOGLEVEL: "${LOGLEVEL}"
      LOGFILE: "/var/log/headstart/headstart.log"
      RENV_VERSION: 0.14.0-5
      CRAN_REPOS: https://cran.wu.ac.at
      LC_ALL: "en_US.UTF-8"
      LANG: "en_US.UTF-8"
      RENV_PATHS_CACHE: /renv/cache
      PYTHONIOENCODING: "utf-8"
      R_BASE_APIKEY: "${R_BASE_APIKEY}"
    restart: unless-stopped
    volumes:
      - ./local_dev/renv/cache:/renv/cache
      - /var/log/headstart:/var/log/headstart
      - ./server/preprocessing/other-scripts:/headstart/other-scripts
    depends_on:
      - redis
    networks:
      - test

  pubmed:
    build:
      context: server
      dockerfile: workers/pubmed/Dockerfile
    environment:
      SERVICE_VERSION: "${SERVICE_VERSION}"
      REDIS_HOST: "${REDIS_HOST}"
      REDIS_PORT: "${REDIS_PORT}"
      REDIS_DB: "${REDIS_DB}"
      REDIS_PASSWORD: "${REDIS_PASSWORD}"
      LOGLEVEL: "${LOGLEVEL}"
      LOGFILE: "${LOGFILE}"
      RENV_VERSION: 0.14.0-5
      CRAN_REPOS: https://cran.wu.ac.at
      LC_ALL: "en_US.UTF-8"
      LANG: "en_US.UTF-8"
      RENV_PATHS_CACHE: /renv/cache
      PYTHONIOENCODING: "utf-8"
    restart: unless-stopped
    volumes:
      - ./local_dev/renv/cache:/renv/cache
      - /var/log/headstart:/var/log/headstart
      - ./server/preprocessing/other-scripts:/headstart/other-scripts
    depends_on:
      - redis
    networks:
      - test

  openaire:
    build:
      context: server
      dockerfile: workers/openaire/Dockerfile
    environment:
      SERVICE_VERSION: "${SERVICE_VERSION}"
      REDIS_HOST: "${REDIS_HOST}"
      REDIS_PORT: "${REDIS_PORT}"
      REDIS_DB: "${REDIS_DB}"
      REDIS_PASSWORD: "${REDIS_PASSWORD}"
      LOGLEVEL: "${LOGLEVEL}"
      LOGFILE: "${LOGFILE}"
      RENV_VERSION: 0.14.0-5
      CRAN_REPOS: https://cran.wu.ac.at
      LC_ALL: "en_US.UTF-8"
      LANG: "en_US.UTF-8"
      RENV_PATHS_CACHE: /renv/cache
      PYTHONIOENCODING: "utf-8"
    restart: unless-stopped
    volumes:
      - ./local_dev/renv/cache:/renv/cache
      - /var/log/headstart:/var/log/headstart
      - ./server/preprocessing/other-scripts:/headstart/other-scripts
    depends_on:
      - redis
    networks:
      - test

  metrics:
    build:
      context: server
      dockerfile: workers/metrics/Dockerfile
    environment:
      SERVICE_VERSION: "${SERVICE_VERSION}"
      REDIS_HOST: "${REDIS_HOST}"
      REDIS_PORT: "${REDIS_PORT}"
      REDIS_DB: "${REDIS_DB}"
      REDIS_PASSWORD: "${REDIS_PASSWORD}"
      LOGLEVEL: "${LOGLEVEL}"
      LOGFILE: "${LOGFILE}"
      RENV_VERSION: 0.14.0-5
      CRAN_REPOS: https://cran.wu.ac.at
      LC_ALL: "en_US.UTF-8"
      LANG: "en_US.UTF-8"
      RENV_PATHS_CACHE: /renv/cache
      PYTHONIOENCODING: "utf-8"
    restart: unless-stopped
    volumes:
      - ./local_dev/renv/cache:/renv/cache
      - /var/log/headstart:/var/log/headstart
      - ./server/preprocessing/other-scripts:/headstart/other-scripts
    depends_on:
      - redis
    networks:
      - test

  searchflow:
    build: local_dev/searchflow-container
    volumes:
      - ../project-website:/var/www/html
      - ./local_dev/config_local_projectwebsite.php:/var/www/html/config_local.php
      - ../search-flow/:/var/www/html/search-flow
      - ./local_dev/config_local_searchflow.ini:/var/www/html/search-flow/config_local.ini
      - ../Headstart:/var/www/html/headstart
      - ./local_dev/config_local_headstart.ini:/var/www/html/headstart/server/preprocessing/conf/config_local.ini
      - ./local_dev/entrypoint.php:/var/www/html/entrypoint.php
    ports:
      - 127.0.0.1:8085:80
    networks:
      - test

  # proxy:
  #   image: 'nginx'
  #   volumes:
  #     - ./templates:/etc/nginx/templates
  #   environment:
  #     - NGINX_PORT=80
  #   ports:
  #     - '127.0.0.1:8081:80'
  #   networks:
  #     - dev_headstart

volumes:
  redis:
  db_data:
    driver: local
  api_cache:
    driver: local

networks:
  test:
